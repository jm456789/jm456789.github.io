---
layout: post

title: "C-Day1 2021-05-18."
excerpt: "소스파일, 목적파일, 실행파일, 자료형, 상수, 변수, main함수, 함수호출, 반환값, 함수 원형 선언"

categories:
  - C
tags:
  - [C]
  
toc: true
toc_sticky: true
 
date: 2021-05-24
last_modified_at: 2021-05-24
---

# 01. 프로그램과 C언어
### C 프로그램 실행 파일

* **소스파일**은 프로그래머가 언어를 사용해서 작성한 파일.
* **목적파일**(기계어)은 컴파일러(번역기)가 소스파일을 번역(컴파일)하면 만들어지는 파일. 사용자가 직접 만들 필요는 없음.
* **실행파일**은 컴퓨터에서 실행할 수 있는 파일.     
<br />  

                  |             빌드            |
                  |    컴파일     |    링크     |
        | 소스파일(*.c) | 목적파일(*.obj) | 실행파일(*.exe) |

소스파일을 목적파일로 번역하는것을 **컴파일**이라 하고,
목적파일을 실행파일로 변환하는것을 **링크**라고 한다.
그리고 컴파일과 링크를 순차적으로 수행하는 것을 **빌드**라고 한다.


---
##### 목적파일을 두는 이유
* 소스파일을 번역해서 바로 실행파일을 만들면, 소스파일의 일부만 바뀌어도 소스파일 전체를 다시 번역해서 실행파일을 만들어야하기 때문에 비효율적. 
* <u>컴파일러가 실행 파일을 만드는 시간을 줄이기 위해 만드는 파일</u>.

---
##### 소스파일을 나누는 이유
C언어 컴파일러는 컴파일을 할 때 먼저 소스파일의 내용이 변경되었는지 체크한 후 변경되었으면 다시 컴파일하여 목적파일을 만들고, 변경되지 않았다면 이전의 목적파일을 재사용한다. 따라서 소스파일이 여러개로 나누어져 있을 때 소스파일의 일부가 바뀌었다면, 변경된 소스파일만 컴파일 되기 때문에 <u>컴파일 시간이 줄어드는 효과가 있다.</u>

---

<br />
# 03. 자료형

### 컴퓨터의 자료 기억방식

##### 부호비트를 사용하여 양수와 음수를 구별한다.
* 비트 8개 중 1개에 음수 또는 양수인지 상태를 저장하고 나머지 비트 7개에는 숫자를 저장한다. 여기서 양수와 음수를 구별하는 비트를 부호비트라고 한다.
* 7비트는 -128~127 사이의 숫자 중 하나를 저장.
* 음수일때는 1, 양수일때는 0을 부호비트에 저장.
<br />
* 부호를 고려하는 1바이트에서 각 비트의 값이 0 1 1 1 1 1 1 1 이라면 양수 최댓값을 의미하기 때문에 숫자 값은 127.
* 1 0 0 0 0 0 0 0 이라면 음수 최솟값을 의미하기때문에 숫자 값은 -128
* 1 1 1 1 1 1 1 1 이라면 숫자 값은 음수 최대값인 -1.


| 저장 공간 크기  | 비트 단위 환산  | 저장할 수 있는 숫자의 개수  |
|:---:|:---:|---|
| 1바이트  | 8비트  | 256개  |
| 2바이트  | 16비트  | 65,536(2 <sup>16</sup>)  |
| 4바이트  | 32비트  | 4,294,967,296(2 <sup>32</sup>)  |

---


### 자료형

* signed char(**char**) : 부호가 있는 1바이트 저장 공간. -128~127의 숫자 중 하나를 저장 할 수 있는 크기. 

* unsigned char(**unsigned char**) : 부호가 없는(양수) 1바이트 저장 공간. 0~255

* signed short int(**short**) : 부호가 있는 2바이트 저장 공간. -32,768~32767

* unsigned short int(**unsigned short**) : 부호가 없는 2바이트 저장 공간. 0~65,535

* signed long int(**int**) : 부호가 있는 4바이트 저장 공간. -2,147,483,648~2,147,483,647

* unsigned long int(**unsigned int**) : 부호가 없는 4바이트 저장 공간. 0~4,294,967,295. 
ex)1970년 1월 1일부터. 초는 - 없으니 unsigned 사용하며 signed 사용했으면 저장공간이 얼마 안남았음. 

---

##### 실수 자료형(소수점 자리의 값을 저장)
* **float** : 소수점 5자리까지 저장. 4바이트
* **double** : 소수점 그 이상 저장. 8바이트

---

<br />

# 04. 상수와 변수
### 상수

> 상수 : 상수는 항상 같은 수! 변하지 않는 숫자를 의미한다. ex)PI

* 8진수 : 숫자 앞에 0을 붙여서 적는다.
* 16진수 : 숫자 앞에 0x 또는 0X를 붙여서 적는다.

| 10진수  | 8진수  |  16진수 | 2진수  |
|:---:|:---:|:---:|:---:|
| 0  | 0  | 0  | 0000  |
| 1  | 1  | 1  | 0001  |
|  2 | 2  | 2  | 0010  |
| 3  | 3  | 3  | 0011  |
| 4  | 4  | 4  | 0100  |
| 5  | 5  | 5  | 0101  |
| 6  | 6  |  6 | 0110  |
| 7  | 7  |  7 | 0111  |
| 8  | 10  | 8  | 1000  |
| 9  | 11  | 9  | 1001  |
| 10  | 12  | A  | 1010  |
|  11 | 13  |  B | 1011  |
| 12  | 14  |  C | 1100  |
| 13  | 15  |  D | 1101  |
| 14  | 16  | E  | 1110  |
| 15  | 17  | F  | 1111  |

> * 2진수와 16진수는 4비트 단위로 나누어서 쉽게 변환 할 수 있다.
> * C언어는 2진법 표현을 제공하지 않는다.

---

##### 문자형 상수 ex) char key = 'A';

---

### 변수
> 변수 : 값이 바뀌는 정보, 저장공간

<br />
# 05. 함수
### C언어와 함수

```
물 마시기 작업
컵을 가져온다 -> 컵에 정수기 물을 따른다 -> 컵에 담긴 물을 마신다
```
=>이 연속적인 행위들을 물 마시기 작업으로 묶어 정의해 놓은걸 **함수**라고 한다.
=>정해진 단위 작업을 수행하도록 여러 개의 명령문들을 하나의 그룹으로 묶은 것을 **함수**라고 한다.


---

### main 함수
* C언어는 main이라는 이름의 함수를 **프로그램 시작 함수** 라고 정했다. 즉 main함수는 '컴파일러에게 프로그램이 시작한다'고 알려주는 특별한 함수이다.
* 한 개의 프로그램에서 main함수는 반드시 **한 개**만 있어야 한다.
* 프로그램의 상태를 알려주기 위해 main함수의 반환값으로 int형을 사용한다. 다음 예시처럼 return 1;이라고 적어주면 프로그램이 정상적으로 작업을 끝내고 종료되었다는 것을 뜻한다.(함수의 반환값은 0, 1이 아니라 어떤 값을 사용해도 상관 없음. 다만 예시에서 사용한 1은 1이 참을 의미하므로 프로그램이 성공적으로 실행되었다는 것을 보여주기 위함이다.)

##### 반환이 필요한 경우 : int형 사용
```c++
int main(){
    return 1; //값 1을 반환함
}
```

---

##### C언어의 <u>소스파일</u>에는 꼭 <u>하나 이상의 함수</u>가 있다.

---

### 함수 정의하고 호출하기

##### 함수 호출 과정
```c++
int Sum(int value1, int value2){
    int result = value1 + alue2;
    return result;
}
void main(){
    int a = 2, b = 3;
    int value = Sum(a, b); 
}
```
1. **Sum(a, b)** -> **Sum(int value1, value2)** : main함수가 Sum 함수를 호출하면서 a와 b의 값을 Sum함수에 전달합니다.
2. **Sum(a, b)** -> **Sum(int value1, value2)** : Sum함수의 매개변수에 main 함수에서 전달 받은 값이 복사됩니다.
3. **Sum(int value1, value2)** -> **value1 + value2** : 입력된 값으로 더하기 작업을 수행합니다.
4. **return result** -> **Sum(a, b)** : main함수로 결과 값을 반환합니다.

---

##### 특별히 호출자로부터 넘겨받을 정보가 없다면 ()안을 비워두거나 ()안에 void라고 적어 인자가 없음을 명시하면 됩니다.

| 매개변수가 있는 함수  | 
|:---:|
|  Sum(int value1, int value2) |

| 매개변수가 없는 함수  |  |  
|:---:|:---:|
|  Sum() | Sum(void) |

---

##### 반환값이란?
* 함수에서 return이라는 예약어를 사용하면 함수는 그 위치에서 <u>종결</u>되며, return뒤에 명시단 result 변수 값이 Sum함수의 반환값이 됩니다.

* 모든 함수가 반환 값을 가지는 것은 아니며, 반환 할 값이 없으면 아래의 예시처럼 void를 명시하면 됩니다.(void 형식으로 정의한 함수의 return 뒤에 반환값을 적으면 오류)

```c++
/* o */
void ZeroData(int *p){
    *p = 0;
} 

/* x */
void Test(int value1, int value2){
    int result = value1 + value2;
    return result; //오류발생!!!
}
```

* return은 함수를 종결하는 역할도 한다.
```c++
void Test(int value1, int value2){
    int a = 5;
    return;     //Test 함수가 정상적으로 종료됨
    a = a + 1;  //오류는 아니지만 함수가 이미 종료되었기 때문에 실행되지 않음.
}
```

---

##### 함수 이름 짓는 방법
> C언어의 예약어는 함수 이름으로 사용할 수 없다. 사용하면 **오류**로 처리된다. ex) void, return, char, int...

---

### 함수 원형 선언하기

> 컴파일러는 C언어 소스 코드를 기계어로 번역 할 때, 코드의 <u>위쪽에서 아래쪽</u>으로 내용을 읽으며 번역한다. 따라서 호출자가 피호출자보다 위에 놓이는 경우에 오류가 발생한다. 이런 경우 <u>함수원형(Function Prototype)</u>을 사용하여 해결한다.

```c++
int Sum(int value1, int value2); //함수 원형 선언

void main(){
    int s = Sum(2, 3);
}

int Sum(int value1, int value2){
    int result = value1 + value 2;
    return result;
}
```

<br />
함수 원형을 선언 할 때 매개변수 이름을 생략할 수 있다. 하지만 어떤 의미의 변수가 전달되는지 짐작할 수 없기 때문에 생략하지 않는게 좋다.

```c++
int Sum(int, int);
```

---

* 함수를 정의한다 : 함수를 구현하는 행위
* 함수를 선언한다 : 함수의 원형을 선언
