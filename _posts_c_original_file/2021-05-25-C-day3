---
layout: post

title: "C-Day3 2021-05-25. "
excerpt: "반복문(for, while, do~while, 별찍기, break, continue, go to), 시프트 연산자와 비트 연산자, 지역변수, 전역변수(exturn 키워드, static 키워드, const 키워드)"

categories:
  - C
tags:
  - [C]
  
toc: true
toc_sticky: true
 
date: 2021-05-30
last_modified_at: 2021-05-30
---

# 09. 반복분

### for 반복문

> for 반복문은 반복의 <u>3요소(시작 조건, 종결 조건, 조건 변화 수식)</u>를 제일 단순하고 정확하게 표현한 반복문이다. 특히 시작과 끝이 명확한 반복 작업에 많이 사용된다.

예제)
```c++
void main(){

    int sum = 0, num;

    for(num = 1; num <= 5; num++){
        printf("num(%d) + sum(%d) = ", num, sum);
        sum += num;
        printf("%d\n", sum);
    }
    printf("\n result : num = %d, sum : %d", num, sum);
}
//결과 -> num(1) + sum(0) = 1
//        num(2) + sum(1) = 3
//        num(3) + sum(3) = 6
//        num(4) + sum(6) = 10
//        num(5) + sum(10) = 15
//        
//        result : num = 6, sum : 15
```

---

for문이 반복의 3요소(시작조건, 종결조건, 조건변화 수식)를 사용할수 있도록 <u>기본적인 형식을 제공</u>하지만 <u>그 형식을 꼭 지켜야하는 것은 아니다.</u>

예제) 시작조건 생략
```c++
//시작조건은 이미 변수에서 초기화 했기 때문에 생략 가능
int sum = 0, num = 1;
for( ; num <= 5; num++){...}

//또는 시작조건에 쉼표를 사용하여 여러 개의 변수 초기화 가능
int sum, num;
for(sum = 0, num = 1; num<=5; num++){...}

```

---

예제) for 반복문으로 무한 루프 만들기(3요소를 모두 적지 않는 경우)
```c++
void main(){

    int sum = 0;
    int num = 1;  //시작조건
    for( ; ; ){  //무한루프
        printf("num(%d) + sum(%d) = ", num, sum);
        sum += num;
        printf("%d\n", sum);
        num++;  //조건변화 수식
        if(num > 5){  //반복문 종료
            break;
        }
    }
    printf("\n result : num = %d, sum : %d", num, sum);
}
//결과 -> num(1) + sum(0) = 1
//        num(2) + sum(1) = 3
//        num(3) + sum(3) = 6
//        num(4) + sum(6) = 10
//        num(5) + sum(10) = 15
//        
//        result : num = 6, sum : 15
```

### while 반복문

> while 반복문은 끝이 정해져 있지 않을 때 사용, 기약없는 반복문을 쓸 때 사용.   
> while(종결조건) { 명령문; }

예제)
```c++
void main(){

    int sum = 0;
    int num = 1; //시작조건
    while(num <=5 ){ //종결조건
        printf("num(%d) + sum(%d) = ", num, sum);
        sum += num;
        printf("%d\n", sum);
        num++; //조건 변화 수식
    }
    printf("resut = num : %d, sum : %d", num, sum);
}
//결과 -> num(1) + sum(0) = 1
//        num(2) + sum(1) = 3
//        num(3) + sum(3) = 6
//        num(4) + sum(6) = 10
//        num(5) + sum(10) = 15
//        resut = num : 6, sum : 15
```

---

결론적으로 <u>3요소가 분명하게 정해져 있다면</u> **for 반복문**을,
<u>시작조건</u>이나, <u>조건 변화 수식이 다양</u>하거나, <u>수치로 정할 수 없는</u> 상황이라면 **while문** 을 사용하는게 편할 수 있다.

---

##### while 반복문으로 무한 루프 만들기

while 반복문은 '종결조건'을 생략할 수 없기 때문에 괄호 안에 상수값이나 수식을 반드시 적어야 한다.
while(1){ ... }

---

##### do~ while 반복문

> while은 먼저 비교하고,   
> do while은 나중에 비교한다. 잘 쓰지는 않으며 명령문을 <u>무조건 한번은 탄다.</u>

```c++
void main(){

    do{
        명령문;
    }while(종결조건);
}
```

---

예제) for 반복문을 중첩 사용해서 구구단 전체를 출력하기
```c++
void main(){

    int step, i;
    for(step = 2; step <=9; step++){
        for(i = 1; i < 9; i++){
            printf("%d * %d = %d\n", step, i, step*i);
        }
    }
}

//결과 - > 2 * 1 = 2
//         2 * 2 = 4
//            ...
//         9 * 7 = 63
//         9 * 8 = 72
```

예제) 별찍기
```c++
#define max 5
void main(){

    for(int col = 1; col <= max; col++){
        for(int i = 1; i < col; i++){
            printf("*");
        }
        printf("\n");
    }
}

//결과 - > *
//         **
//         ***
//         ****
```

예제) 뒤집어진 별찍기
```c++
#define max 5
void main(){

    for(int col = max; col > 1; col--){
        for(int i = 1; i < col; i++){
            printf("*");
        }
        printf("\n");
    }
}

//결과 -> ****
//        ***
//        **
//        *
```

예제) 공백있는 별찍기
```c++
#define max 5
void main() {
    int sc = 0;
    for (int step = 1; step <= max; step += 2) {

        sc = (max - step) / 2;
        for (int s = 1; s <= sc; s++) {
            printf(" ");
        }

        for (int i = 1; i <= step; i++) {
            printf("*");
        }
        printf("\n");
    }
}

// 결과 - >   *
//           ***
//          *****
```

---

### break 제어문

break는 하나의 반복문에만 미치기 때문에 중첩된 반복문에서도 하나의 반복문에만 적용된다.   
따라서 특정 상황에서 반복문을 둘 다 종료시키고 싶다면 바깥쪽 반복문에도 조건문을 사용하여 break문을 적어줘야 한다.

```c++
void main(){
    int m, n;
    for(m = 5; m < 7; m++){
        for(n = 0; n < 3; n++){
            if(m == 5 && n ==1){ //m값은 5이고 n값은 1일 때 break문 수행
                break;
            }
            printf("m(%d) - n(%d)", m, n);
        }
        if(m == 5 && n == 1){
            break;
        }
    }
}

//결과 -> m(5) - n(0)
```

---

### continue 제어문

continue문은 1회성 취소를 사용한다. (이번 반복은 skip이다 할 때 사용)

```c++
void main(){
    int m;
    for(m = 5; m < 8; m++){
        if(m == 6){  //m값이 6일 때 continue문 수행
            continue;
        }
        printf("m(%d)\n", m);
    }
}
// 결과 -> m(5)
//         m(7)
```

---

### go to 문

go to ~~~;라고 선언 해주면 go to 문 만났을 때 ~~~라고 선언 해 준 부분으로 그냥 바로 이동해 버린다.
go to 문은 되도록 사용하지 않는 것이 좋으며 실무에서 쓰면 돌맞는다. 걍 이런게 있다 정도로만~

---

# 10. 시프트 연산자와 비트 연산자

### 비트 단위 연산과 비트 패턴

알면 좋고 모르면 불편한 정도. 가벼운 맘으로 강의 듣기~, but 하드웨어쪽은 필수!

* c언어의 가장 작은 자료형은 1바이트이다.
* 오른쪽에서 왼쪽으로 갈수록 비트 번호가 커진다.

---

##### 시프트 연산자

* 시프트 연산자(<<, >>)는 변수의 값을 지정한 비트 수만큼 왼쪽 또는 오른쪽으로 비트를 이동 시키는 기능을 합니다.
* 비트가 이동한 빈자리에는 0이 채워집니다.
* 변수에 부호가 있는 경우 -> 부호비트가 1이면 빈자리는 1로 채워진다
* 비트가 왼족으로 이동해서 사라지는것을 오버플로(Overflow)라 부르고, 오른쪽으로 이동해서 사라지는 것을 언더플로(Underflow)라고 부른다.
* 결론은 특수한 목적에서만 사용. 

---

##### 데이터 암호화하기
XOR(^) 연산자 사용..

---

# 11. 지역 변수와 전역 변수

### 지역변수(Local Variable)
* 함수 안에 선언한 변수나 매개변수는 지역변수이다.
* 자신을 선언한 함수가 호출 될 때 메모리에 저장공간이 만들어졌다가 함수 호출이 끝나면 함께 사라진다. <u>즉 함수와 같은 수명을 가진다.</u>
* 지역 변수 이름은 <u>서로 다른 함수에서 선언</u>된 변수라면 <u>중복해서 사용</u>할 수 있다.
* 지역변수는 스스로 초기화되지 않기 때문에 필요할 때 <u>프로그래머가 직접 초기화</u> 해야 한다.

```c++
int ReturnNum(){
    int num = 5;
    return num;
}
void main(){
    ReturnNum();
    printf("%d", num);
}
// 결과 -> 11행의 num이 선언되지 않은 함수라면서 오류 발생
```

```c++
int Sum(int data1, int data2){   //매개변수 data1, data2는 Sum함수의 지역변수
    int result = data1 + data2; //해당 result와 아래 result는 서로 다른 메모리에 할당되어 값이 공유되지 않는다.
    return result;
}
void main(){
    int result;
    result = Sum(5, 3); //해당 result와 위의 result는 서로 다른 메모리에 할당되어 값이 공유되지 않는다. 초기화 되지 않아 어떤 값이 들어있는지 모름
    printf("5 + 3 = %d", result);
}
```

---

### 전역변수(Global Variable)

* 이 변수는 프로그램이 시작할 때 만들어졌다가 프로그램이 종료될 때 사라진다. 따라서 <u>수명이 프로그램과 같다.</u>
* 전역 변수는 <u>특별한 초기화 값이 없으면 0으로 초기화</u> 된다.(프로그램마다 다르며 무조건 0으로 초기화되지 않는다.)
* 전역변수를 사용하면 <u>의존적</u>으로 바뀌게 된다. -> 예를들어 다른 프로그램에서 재사용하기 위해 코드를 복사하는 경우에는 변수 선언한것도 같이 옮겨야 하는데, 옮겨 갈 프로그램에 이미 같은 이름으로 선언된 변수가 있다면 하나는 이름을 바꿔야 한다.
* 전역 변수는 꼭 필요한 경우에만 사용하세요 -> 같은 이름의 전역변수를 사용하면 프로그램이 링크 될 때 중복 오류가 발생

---

##### 지역변수와 전역변수의 이름이 같다면?
두 변수는 성격이 달라서 오류로 처리되지 않으며, 지역을 우선해서 처리한다.

---

### extern 키워드

<u>같은 프로젝트 안에 존재</u>하는 <u>전역 변수를 참조</u>하겠다는 의미로 사용

```c++
//Sum.c
int result = 0; //전역변수

void Sum(int data1, int data2){
    result = data1 + data2;
}

//----------------------------------------------------------------------------------------------------------------------------------------

//Main.c
void Sum(int, int);   //함수 원형 선언
exturn int result;    //전역변수 참조 선언

void main(){
    Sum(5, 3);
    printf("5 + 3 = %d",result);
}
```

##### 사용시 주의할 점

프로젝트 p

| A.c  | B.c  |
|---|---|
| int g_data1 = 0;    <br />    int g_data2 = 0;    <br />    int g_data5 = 0;   | 1. int g_data1;    <br />    2. exturn int g_data2;    <br />    3. exturn int g_data3;    <br />    4. exturn int g_data4 = 0;    <br />    5. exturn int g_data5 = 0;  |

1. 오류 - >다른데서 이미 전역변수 선언해서 썼으니 너는 쓰지마
2. 정상
3. 오류 -> A.c에 선언되지 않은 전역변수를 참조하여 오류
4. 정상 -> exturn 참조할 때 초기화를 사용했기 때문에 처리된다.
5. 오류 -> A.c에서 이미 전역변수가 선언됐기 때문에 중복되었다고 오류

---

### static 키워드

* 해당 전역 변수의 사용 범위를 변수를 <u>선언한 소스 파일로 제한</u>

프로젝트 p

| A.c  | B.c  |
|---|---|
| int g_data1 = 0;    <br />    static int g_data2 = 0;     <br />    static int g_data3 = 0;  | 1. int g_data1;    <br />    2. int g_ data;     <br />    3. exturn int g_data3;  |

1. 오류 -> 같은 이름의 전역변수가 있기 때문에 오류
2. 정상 -> static으로 구별되어 별개의 전역변수로 처리
3. 오류 -> static이라 exturn으로 참조할 수 없기 때문에 오류

---

### const 키워드
* 변수를 상수처럼 쓰고싶을 때 사용.
* 변경이 안되게끔 잠궈준다.
* 변수의 값을 변경하지 않겠다는 의미.

